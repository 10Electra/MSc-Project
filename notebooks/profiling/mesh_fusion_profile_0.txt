[Mesh fusion pipeline before adjustments or optimisations]
The total time taken was    1788.71 ms

 Line  Time (ms)    Hits  Code
------------------------------------------------------------
  101    1050.16       5  trilat_shifted_pts = trilateral_shift(trilat_shifted_pts,normals,local_spacing,local_density,overlap_idx,tree,r_alpha,h_alpha)
   63     450.60       1  normals = smooth_normals(points, normals, k=8, T=0.7, n_iters=5)
  106     177.59       2  cluster_mapping, clustered_overlap_pnts, clustered_overlap_cols, clustered_overlap_nrms = merge_nearby_clusters(
  193      22.90       2  overlap_mesh = o3d.geometry.TriangleMesh.create_from_point_cloud_ball_pivoting(
   82      21.11       2  overlap_idx, overlap_mask = compute_overlap_set(
  213      19.50       2  trimmed_overlap_mesh = topological_trim(
   68      17.18       1  local_spacing_1, local_density_1 = calc_local_spacing(points1, points1)
   69      15.75       1  local_spacing_2, local_density_2 = calc_local_spacing(points2, points2)
  224       2.79       1  triangles=o3d.utility.Vector3iVector(fused_mesh_triangles),
  233       1.91       1  fused_mesh.remove_non_manifold_edges()
  200       1.66       1  overlap_mesh.remove_non_manifold_edges()
   49       1.45       1  tree = o3d.geometry.KDTreeFlann(points.T)
  197       1.33       1  overlap_mesh.remove_duplicated_vertices()
   94       1.32       1  boundary_edges = find_boundary_edges(nonoverlap_tris)
  230       0.67       1  fused_mesh.remove_duplicated_triangles()
  120       0.61       1  overlap_any_idx = np.unique(all_tris[tri_has_overlap_any])
  198       0.54       1  overlap_mesh.remove_duplicated_triangles()
  231       0.34       1  fused_mesh.remove_duplicated_vertices()
   93       0.17       1  nonoverlap_tris = all_tris[~np.all(overlap_mask[all_tris], axis=1)]
  119       0.13       1  tri_has_overlap_any = overlap_mask[all_tris].any(axis=1)
  234       0.08       1  fused_mesh.compute_vertex_normals()
   39       0.07       1  points1 = np.asarray(mesh1.vertices)
   54       0.07       1  mesh1.compute_vertex_normals()
   55       0.07       1  mesh2.compute_vertex_normals()
  201       0.05       1  overlap_mesh.compute_vertex_normals()
   76       0.05       3  [(1 / len(ls)) * np.sum(ls) for ls in local_spacings]
  159       0.04       1  new_colours = np.clip(new_colours, 0, 1)
   61       0.04       3  scan_ids = np.concatenate([np.full(len(pts), i) for i, pts in enumerate(pointclouds)])
   43       0.03       1  points = np.vstack(pointclouds)
  229       0.03       1  fused_mesh.remove_unreferenced_vertices()
  137       0.02       1  trilat_shifted_pts[border_mask],
  210       0.02       1  np.all(mapped_boundary_edges < len(overlap_mesh.vertices), axis=1)
   47       0.02       1  colours = np.concatenate([colours1, colours2], axis=0)
  138       0.02       1  trilat_shifted_pts[nonoverlap_nonborder_mask],
  145       0.02       1  colours[border_mask],
  153       0.02       1  normals[border_mask],
  154       0.02       1  normals[nonoverlap_nonborder_mask],
   75       0.02       2  global_avg_spacing = (1 / len(local_spacings)) * np.sum(
   59       0.02       1  normals = np.concatenate([normals1, normals2], axis=0)
  146       0.02       1  colours[nonoverlap_nonborder_mask],
  178       0.02       1  pcd.points = o3d.utility.Vector3dVector(new_points[:n_overlap])
   72       0.02       1  local_spacing = np.concatenate(local_spacings)
  222       0.02       2  fused_mesh = o3d.geometry.TriangleMesh(
   91       0.01       1  all_tris = np.concatenate([tris1, tris2], axis=0)
  123       0.01       1  border_mask[overlap_any_idx] = True
  127       0.01       1  nonoverlap_nonborder_mask[cluster_mapping == -1] = True
   90       0.01       1  tris2 = np.asarray(mesh2.triangles) + len(points1)  # shift indices
  124       0.01       1  border_mask[cluster_mapping != -1] = False
  181       0.01       1  pcd.normals = o3d.utility.Vector3dVector(new_normals[:n_overlap])
  227       0.01       1  fused_mesh.vertex_colors = o3d.utility.Vector3dVector(new_colours)
   89       0.01       1  tris1 = np.asarray(mesh1.triangles)
  164       0.01       1  border_idx_from = np.arange(len(points))[border_mask]
  191       0.01       1  radii = o3d.utility.DoubleVector([ball_r, ball_r * 1.5])
  199       0.01       1  overlap_mesh.remove_degenerate_triangles()
  219       0.01       1  [trimmed_overlap_tris, mapping[nonoverlap_tris]], axis=0
  218       0.01       2  fused_mesh_triangles = np.concatenate(
  150       0.01       2  new_normals = np.concatenate(
  167       0.01       1  free_idx_from = np.arange(len(points))[nonoverlap_nonborder_mask]
  223       0.01       1  vertices=o3d.utility.Vector3dVector(new_points),
  232       0.01       1  fused_mesh.remove_degenerate_triangles()
  131       0.01       1  n_border = border_mask.sum()
  134       0.01       2  new_points = np.concatenate(
  208       0.01       1  mapped_boundary_edges = mapping[boundary_edges]
  209       0.01       2  relevant_boundary_edges = mapped_boundary_edges[
   99       0.00       1  trilat_shifted_pts = points.copy()
  128       0.00       1  nonoverlap_nonborder_mask[border_mask] = False
  165       0.00       1  border_idx_to = np.arange(n_border) + n_overlap
  177       0.00       1  pcd = o3d.geometry.PointCloud()
  203       0.00       1  overlap_mesh.vertex_colors = pcd.colors
   40       0.00       1  points2 = np.asarray(mesh2.vertices)
   57       0.00       1  normals1 = np.asarray(mesh1.vertex_normals)
   73       0.00       1  local_density = np.concatenate((local_density_1, local_density_2))
  100       0.00       6  for _ in range(5):
  132       0.00       1  n_free = nonoverlap_nonborder_mask.sum()
  142       0.00       2  new_colours = np.concatenate(
  168       0.00       1  free_idx_to = np.arange(n_free) + n_overlap + n_border
  217       0.00       1  trimmed_overlap_tris = np.asarray(trimmed_overlap_mesh.triangles)
  236       0.00       1  return fused_mesh
   45       0.00       1  colours1 = mesh1.vertex_colors
   58       0.00       1  normals2 = np.asarray(mesh2.vertex_normals)
  122       0.00       1  border_mask = np.zeros(len(points), dtype=bool)
  170       0.00       1  mapping = cluster_mapping.copy()
   46       0.00       1  colours2 = mesh2.vertex_colors
   70       0.00       1  local_spacings = (local_spacing_1, local_spacing_2)
  126       0.00       1  nonoverlap_nonborder_mask = np.zeros(len(points), dtype=bool)
  130       0.00       1  n_overlap = len(clustered_overlap_pnts)
  136       0.00       1  clustered_overlap_pnts,
  144       0.00       1  clustered_overlap_cols,
  156       0.00       1  axis=0,
  171       0.00       1  mapping[border_idx_from] = border_idx_to
  172       0.00       1  mapping[free_idx_from] = free_idx_to
  190       0.00       1  ball_r = 1.1 * global_avg_spacing
   42       0.00       1  pointclouds = (points1, points2)
   83       0.00       1  points, normals, local_spacing, scan_ids, h_alpha, r_alpha, tree
  107       0.00       1  trilat_shifted_pts=trilat_shifted_pts,
  108       0.00       1  normals=normals,
  109       0.00       1  colours=colours,
  110       0.00       1  overlap_mask=overlap_mask,
  111       0.00       1  global_avg_spacing=global_avg_spacing,
  112       0.00       1  h_alpha=h_alpha,
  113       0.00       1  find_cyl_neighbours=find_cyl_neighbours,
  135       0.00       1  [
  140       0.00       1  axis=0,
  143       0.00       1  [
  148       0.00       1  axis=0,
  151       0.00       1  [
  152       0.00       1  clustered_overlap_nrms,
  180       0.00       1  if new_normals[:n_overlap] is not None:
  194       0.00       1  pcd, radii
  214       0.00       1  overlap_mesh, relevant_boundary_edges
